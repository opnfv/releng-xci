---
##
# Generate nodes list and attached facts
##

- name: Role message
  debug:
    msg: "{{ msg.split('\n') }}"
  vars:
    msg: |
      ************************************************************************
      * OPNFV VM Managment role
      * -----------------------
      * Prepare VMs for a deploymet size: {{XCI_FLAVOR}}
      * Pod config: {{ idf.xci.pod_name }}
      ************************************************************************
  tags:
    - always

- name: Concat nodes from pdf with nodes from xci_hosts
  set_fact:
    nodes_list: "{{ nodes + xci_hosts }}"
  tags:
    - always

- name: Limit the nodes list to those required by the XCI_FLAVOR
  set_fact:
    nodes: "{{ nodes_list | nodes_filter(idf.xci.nodes_roles, \
            deploy_definitions[ XCI_FLAVOR ]) }}"
  tags:
    - always

- name: Get a node index, it will be useful to increment ips or ports
  set_fact:
    nodes_index: "{{ nodes | nodes_index() }}"
  tags:
    - always

- name: List XCI hosts name (to set a cloud image as disk)
  set_fact:
    xci_nodes_list: "{{ xci_hosts | nodes_name() }}"
  tags:
    - always

##
# Checkup require packages
##

- name: install packages
  become: "yes"
  include_tasks: install.yml
  tags:
    - install

##
# Clean VIRSH networks
# - Get existing libvirt network
# - destroy libvirt networks containing a bridge that will be used
# - destroy libvirt networks with the same name of what we will create
##

- name: collect facts about existing networks
  become: "yes"
  virt_net:
    command: facts
  tags:
    - clean

- name: Clean Libvirt network containing a bridge from ansible_libvirt_networks
  become: "yes"
  include_tasks: clean-libvirt-network.yml
  vars:
    net_name: "{{ item.key }}"
  when: item.value.bridge in
        idf.xci.jumphost_interfaces_bridges
  with_dict: "{{ ansible_libvirt_networks }}"
  tags:
    - clean

- name: collect facts about existing networks
  become: "yes"
  virt_net:
    command: facts
  tags:
    - clean

- name: Clean Libvirt networks of this pod if not already destroyed
  become: "yes"
  include_tasks: clean-libvirt-network.yml
  vars:
    net_name: "{{ idf.xci.pod_name }}_{{ item }}"
  when: item in ansible_libvirt_networks
  with_items: "{{ net_config | interface_id_to_net(join=True) }}"
  tags:
    - clean

##
# Clean VIRSH VM
##

- name: get list of VMs
  become: "yes"
  virt:
    command: "list_vms"
  register: vms
  tags:
    - clean

- name: Delete Libvirt node when name contains pod_name
  become: "yes"
  include_tasks: clean-libvirt-node.yml
  vars:
    vm: "{{ item }}"
  when: item | match('^'+idf.xci.pod_name+'_.*')
  with_items: "{{ vms.list_vms }}"
  tags:
    - clean

##
# Generate inventory facts
##

- name: get pxe network
  set_fact:
    pxe_network: "{{ net_config[idf.xci.pxe_network].network }}"
  tags:
    - always

- name: get roles to nodes mapping
  set_fact:
    roles: "{{ idf.xci.nodes_roles | role2nodes() }}"
  tags:
    - always

- name: get roles as dict
  set_fact:
    nodes_d: "{{ nodes | nodes_as_dict() }}"
  tags:
    - always

##
# Create VMs and network
##

- name: update facts to get last ansible_interfaces
  become: "yes"
  setup:

- debug:
    var: ansible_interfaces
    verbosity: 2
  tags:
    - deploy

- name: Create Libvirt networks
  become: "yes"
  include_tasks: create-libvirt-network.yml
  vars:
    interface_index: "{{ item.0 }}"
    net_name: "{{ idf.xci.pod_name }}_{{ item.1 }}"
    attached_bridge: "{{ idf.xci.jumphost_interfaces_bridges[item.0] }}"
    pxe_net: "{{ idf.xci.pxe_network }}"
  when: idf.xci.jumphost_interfaces_bridges[item.0] not in ansible_interfaces
  with_indexed_items: "{{ net_config | interface_id_to_net(join=True, \
    limit=(idf.xci.jumphost_interfaces_bridges|length) ) }}"
  tags:
    - deploy

##
# Create VM
#   - empty disk for all nodes
#   - based on a cloud image for opnfv_hosts
##

- name: Create Libvirt nodes
  become: "yes"
  include_tasks: create-libvirt-node.yml
  vars:
    prefix: "{{ idf.xci.pod_name }}_"
    vm: "{{ item }}"
    vm_index: "{{ nodes_index[item.name] }}"
    networks: "{{ net_config | interface_id_to_net(join=True) }}"
    clone_cloud_img: "{{ xci_hosts_image if item.name in xci_nodes_list \
                                         else '' }}"
  when: item.node.vendor == 'libvirt'
  with_items: "{{ nodes }}"
  tags:
    - deploy

##
# For OPNFV Host:
#   - edit qcow to disable net waiting in cloud config (and gain a few minutes)
#   - set a configdrive for qcow
#     - set hostname
#     - set fixed ip
#     - set ssh authorized key
##

- name: get ssk key content
  set_fact:
    ssh_pub_key_content: "{{ lookup('file', ssh_pub_key) }}"
  tags:
    - deploy

- name: Edit VM
  become: "yes"
  include_tasks: vm_custom.yml
  when: (xci_hosts_start) and (node.name == 'opnfv_host')
  with_items: "{{ xci_hosts }}"
  loop_control:
    loop_var: node
  tags:
    - deploy

##
# Start XCI nodes
##

- name: Start opnfv_host
  include_tasks: start.yml
  when: (xci_hosts_start) and (node.name == 'opnfv_host')
  with_items: "{{ xci_hosts }}"
  loop_control:
    loop_var: node
  tags:
    - start

- name: set ansible inventory
  template:
    src: "templates/opnfv_hosts_inventory.yml.j2"
    dest: "{{ xci_configs_root }}/opnfv_hosts_inventory.yml"
  tags:
    - start
