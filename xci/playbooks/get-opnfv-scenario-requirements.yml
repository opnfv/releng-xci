---
# Copyright 2016, Rackspace US, Inc.
# Copyright 2017, SUSE LINUX GmbH.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Clone the scenario requirements
  hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - ../var/opnfv.yml
  vars:
    ansible_python_interpreter: "/usr/bin/python"
    git_clone_retries: 2
    git_clone_retry_delay: 5
    role_path_default: "{{ playbook_dir }}/roles"

  tasks:
    - name: Get scenario metadata
      include_vars:
        file: ../opnfv-scenario-requirements.yml

    - name: Fail if 'DEPLOY_SCENARIO' is not defined
      fail:
        msg: "DEPLOY_SCENARIO env variable is not defined so no scenario can be deployed"
      when: deploy_scenario is not defined

    - name: Ensure {{ deploy_scenario }} is a known XCI scenario
      fail:
        msg: "{{ deploy_scenario }} does not exist"
      when: scenario[deploy_scenario] is not defined

    - name: Fail if the scenario '{{ deploy_scenario }}' is not supported by the installer '{{ installer_type }}'
      fail:
        msg: "'{{ deploy_scenario }}' is not supported by the installer '{{ installer_type }}'"
      when: installer_type not in scenario[deploy_scenario].installers

    - name: Fail if the distro '{{ xci_distro }}' is not supported by the installer '{{ installer_type }}'
      fail:
        msg: "'{{ xci_distro }}' is not supported by the installer '{{ installer_type }}'"
      when: xci_distro not in scenario[deploy_scenario].installers[installer_type].distros

    - name: Fail if the flavor '{{ xci_flavor }}' is not supported by the installer '{{ installer_type }}'
      fail:
        msg: "'{{ xci_flavor }}' is not supported by the installer '{{ installer_type }}'"
      when: xci_flavor not in scenario[deploy_scenario].installers[installer_type].flavors

    - name: Remove existing clone of releng-xci-scenarios
      file:
        path: "{{ xci_scenarios_cache }}/releng-xci-scenarios"
        state: absent

    - name: Clone the scenario repository and checkout version '{{ scenario[deploy_scenario].version }}'
      git:
        repo: "{{ scenario[deploy_scenario].src }}"
        dest: "{{ xci_scenarios_cache }}/releng-xci-scenarios"
        version: "{{ scenario[deploy_scenario].version | default(master) }}"
        refspec: "{{ scenario[deploy_scenario].refspec | default(omit) }}"
        force: yes

    - name: Check if the role for the scenario exists
      stat:
        path: "{{ xci_scenarios_cache }}/releng-xci-scenarios/{{ scenario[deploy_scenario].installers[installer_type].role }}"
      register: role_directory

    - name: Fail if the role for the scenario '{{ deploy_scenario }}' does not exist
      fail:
        msg: "Role for the scenario '{{ deploy_scenario }}' doesn't exist in releng-xci-scenarios repo!"
      when: not role_directory.stat.exists

    - name: Plug in the Ansible role of the scenario '{{ deploy_scenario }}' to XCI
      synchronize:
        src: "{{ xci_scenarios_cache }}/releng-xci-scenarios/{{ scenario[deploy_scenario].installers[installer_type].role }}/"
        dest: "{{ role_path_default }}/{{ scenario[deploy_scenario].installers[installer_type].role | basename }}"

    - name: Record scenario information
      ini_file:
        create: yes
        section: scenarios
        state: present
        option: role
        value:  "{{ scenario[deploy_scenario].installers[installer_type].role | basename }}"
        path: "/etc/ansible/facts.d/xci.fact"
      become: true

# vim: set ts=2 sw=2 expandtab:
