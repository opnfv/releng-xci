{
    "environment": {
        "CONSTRAINT_TYPE": "none",
        "CLOUD_PROVIDER": "rancher",
        "RBAC": "false",
        "REGISTRY": "",
        "DNS_REPLICAS": "1",
        "ENABLE_RANCHER_INGRESS_CONTROLLER": "true",
        "ENABLE_ADDONS": "true",
        "POD_INFRA_CONTAINER_IMAGE": "gcr.io/google_containers/pause-amd64:3.0",
        "AUDIT_LOGS": "false",
        "INFLUXDB_HOST_PATH": "",
        "ADDITIONAL_KUBELET_FLAGS": "",
        "EMBEDDED_BACKUPS": "true",
        "BACKUP_PERIOD": "15m0s",
        "BACKUP_RETENTION": "24h",
        "ETCD_HEARTBEAT_INTERVAL": "500",
        "ETCD_ELECTION_TIMEOUT": "5000",
        "RANCHER_LB_SEPARATOR": "rancherlb"
    },
    "system": true,
    "startOnCreate": true,
    "name": "kubernetes",
    "externalId": "catalog://library:infra*k8s:35",
    "rancherCompose": ".catalog:\n  name: Kubernetes\n  version: v1.7.7-rancher1\n  description: Rancher Kubernetes service\n  minimum_rancher_version: v1.6.6-rc1\n  questions:\n  - variable: CONSTRAINT_TYPE\n    label: Plane Isolation\n    description: Isolate the data, orchestration and compute planes via host labels. Set to required when running in production.\n    required: true\n    default: none\n    type: enum\n    options:\n    - none\n    - required\n  - variable: CLOUD_PROVIDER\n    label: Cloud Provider\n    description: The cloud provider on which Kubernetes is running\n    required: true\n    default: rancher\n    type: enum\n    options:\n     - rancher\n     - aws\n  - variable: RBAC\n    description: Enable Kubernetes role-based access control with integrated Rancher authentication.\n    label: Kubernetes RBAC\n    required: true\n    default: false\n    type: boolean\n  - variable: REGISTRY\n    description: The registry to pull addon images and the optional pod infra container image. This should be set to the private registry from which the images for addon-services (i.e. helm, heapster, dashboard, dns) and the pod infra container image should be pulled.\n    label: Private Registry for Add-Ons and Pod Infra Container Image\n    required: false\n    default: \"\"\n    type: string\n  - variable: DNS_REPLICAS\n    description: Number of replicas for SKY DNS service. Each replica would run on the separate host, so change the value according to your infrastructure.\n    label: Sky DNS service scale\n    required: false\n    default: 1\n    type: int\n  - variable: ENABLE_RANCHER_INGRESS_CONTROLLER\n    description: Deploy the Rancher ingress controller which automatically provisions Rancher load balancers in response to Kubernetes ingress creation events.\n    label: Enable Rancher Ingress Controller\n    required: true\n    default: true\n    type: boolean\n  - variable: ENABLE_ADDONS\n    label: Enable Kubernetes Add-ons\n    description: Setting this to `false` will disable Dashboard, Helm, SkyDNS, and other Kubernetes add-on services. This is meant for advanced users who want to deploy custom versions of these add-ons.\n    required: true\n    default: true\n    type: boolean\n  - variable: POD_INFRA_CONTAINER_IMAGE\n    label: Pod Infra Container Image\n    description: The image whose network/ipc namespaces containers in each pod will use. It uses kubelet default if left empty. Do not add the private registry to this field, update the `Private Registry for Add-Ons and Pod Infra Container Image` field with the registry information.\n    required: false\n    default: \"gcr.io/google_containers/pause-amd64:3.0\"\n    type: string\n  - variable: AUDIT_LOGS\n    description: Enable Audit logs to stdout for the kube-apiserver\n    label: Audit Logs\n    required: false\n    default: false\n    type: boolean\n  - variable: INFLUXDB_HOST_PATH\n    label: InfluxDB Host Path\n    description: \"Write Heapster metrics to an absolute path on the host. This may be network-attached storage.\"\n    required: false\n    type: string\n  - variable: ADDITIONAL_KUBELET_FLAGS\n    label: Additional Kubelet Flags\n    required: false\n    type: string\n  - variable: EMBEDDED_BACKUPS\n    label: Enable Backups\n    description: \"Periodically backup state to /var/etcd/backups. Mount network storage here on all hosts before continuing\"\n    required: true\n    default: true\n    type: boolean\n  - variable: BACKUP_PERIOD\n    label: Backup Creation Period\n    description: Create a backup after this amount of time passes. Must conform to duration format\n    required: true\n    default: 15m0s\n    type: string\n  - variable: BACKUP_RETENTION\n    label: Backup Retention Period\n    description: Expire a backup after this amount of time passes. Must conform to duration format\n    required: true\n    default: 24h\n    type: string\n  - variable: ETCD_HEARTBEAT_INTERVAL\n    label: Etcd Heartbeat Interval\n    description: Time (in milliseconds) of a heartbeat interval.\n    required: true\n    default: 500\n    type: int\n  - variable: ETCD_ELECTION_TIMEOUT\n    label: Etcd Election Timeout\n    description: Time (in milliseconds) for an election to timeout.\n    required: true\n    default: 5000\n    type: int\n  - variable: RANCHER_LB_SEPARATOR\n    description: Separator used in Rancher LB names generated by ingress controller\n    label: Rancher LB name separator\n    required: false\n    default: rancherlb\n    type: string\nkubernetes:\n    metadata:\n        sans:\n        - \"IP:10.43.0.1\"\n    health_check:\n        port: 6443\n        interval: 2000\n        response_timeout: 2000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n        initializing_timeout: 60000\n        reinitializing_timeout: 60000\n    retain_ip: true\n\netcd:\n    retain_ip: true\n    scale_policy:\n        increment: 1\n        max: 3\n        min: 1\n    health_check:\n        port: 2378\n        request_line: GET /health HTTP/1.0\n        interval: 5000\n        response_timeout: 3000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n        initializing_timeout: 120000\n        reinitializing_timeout: 120000\n        recreate_on_quorum_strategy_config:\n            quorum: 2\n        strategy: recreateOnQuorum\n\nrancher-kubernetes-agent:\n    health_check:\n        request_line: GET /healthcheck HTTP/1.0\n        port: 10240\n        interval: 2000\n        response_timeout: 2000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n        initializing_timeout: 60000\n        reinitializing_timeout: 60000\n\nscheduler:\n    health_check:\n        request_line: GET /healthz HTTP/1.0\n        port: 10251\n        interval: 2000\n        response_timeout: 2000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n        initializing_timeout: 60000\n        reinitializing_timeout: 60000\n\ncontroller-manager:\n    health_check:\n        request_line: GET /healthz HTTP/1.0\n        port: 10252\n        interval: 2000\n        response_timeout: 2000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n        initializing_timeout: 60000\n        reinitializing_timeout: 60000\n\nkubectld:\n    health_check:\n        port: 10240\n        interval: 2000\n        response_timeout: 2000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n        initializing_timeout: 60000\n        reinitializing_timeout: 60000\n",
    "dockerCompose": "\n{{- $k8sImage:=\"rancher/k8s:v1.7.7-rancher1\" }}\n{{- $etcdImage:=\"rancher/etcd:v2.3.7-13\" }}\n{{- $kubectldImage:=\"rancher/kubectld:v0.8.3\" }}\n{{- $etcHostUpdaterImage:=\"rancher/etc-host-updater:v0.0.3\" }}\n{{- $k8sAgentImage:=\"rancher/kubernetes-agent:v0.6.6\" }}\n{{- $k8sAuthImage:=\"rancher/kubernetes-auth:v0.0.8\" }}\n{{- $ingressControllerImage:=\"rancher/lb-service-rancher:v0.7.10\" }}\n\nkubelet:\n    labels:\n        io.rancher.container.dns: \"true\"\n        io.rancher.container.create_agent: \"true\"\n        io.rancher.container.agent.role: environmentAdmin\n        io.rancher.scheduler.global: \"true\"\n        {{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\n        io.rancher.scheduler.affinity:host_label: compute=true\n        {{- end }}\n    command:\n        - kubelet\n        - --kubeconfig=/etc/kubernetes/ssl/kubeconfig\n        - --api_servers=https://kubernetes.kubernetes.rancher.internal:6443\n        - --allow-privileged=true\n        - --register-node=true\n        - --cloud-provider=${CLOUD_PROVIDER}\n        - --healthz-bind-address=0.0.0.0\n        - --cluster-dns=10.43.0.10\n        - --cluster-domain=cluster.local\n        - --network-plugin=cni\n        - --cni-conf-dir=/etc/cni/managed.d\n        {{- if and (ne .Values.REGISTRY \"\") (ne .Values.POD_INFRA_CONTAINER_IMAGE \"\") }}\n        - --pod-infra-container-image=${REGISTRY}/${POD_INFRA_CONTAINER_IMAGE}\n        {{- else if (ne .Values.POD_INFRA_CONTAINER_IMAGE \"\") }}\n        - --pod-infra-container-image=${POD_INFRA_CONTAINER_IMAGE}\n        {{- end }}\n        {{- range $i, $elem := splitPreserveQuotes .Values.ADDITIONAL_KUBELET_FLAGS }}\n        - {{ $elem }}\n        {{- end }}\n    image: {{$k8sImage}}\n    volumes:\n        - /run:/run\n        - /var/run:/var/run\n        - /sys:/sys:ro\n        - /var/lib/docker:/var/lib/docker\n        - /var/lib/kubelet:/var/lib/kubelet:shared\n        - /var/log/containers:/var/log/containers\n        - /var/log/pods:/var/log/pods\n        - rancher-cni-driver:/etc/cni:ro\n        - rancher-cni-driver:/opt/cni:ro\n        - /dev:/host/dev\n    net: host\n    pid: host\n    ipc: host\n    privileged: true\n    links:\n        - kubernetes\n\n{{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\nkubelet-unschedulable:\n    labels:\n        io.rancher.container.dns: \"true\"\n        io.rancher.container.create_agent: \"true\"\n        io.rancher.container.agent.role: environmentAdmin\n        io.rancher.scheduler.global: \"true\"\n        io.rancher.scheduler.affinity:host_label_ne: compute=true\n    command:\n        - kubelet\n        - --kubeconfig=/etc/kubernetes/ssl/kubeconfig\n        - --api_servers=https://kubernetes.kubernetes.rancher.internal:6443\n        - --allow-privileged=true\n        - --register-node=true\n        - --cloud-provider=${CLOUD_PROVIDER}\n        - --healthz-bind-address=0.0.0.0\n        - --cluster-dns=10.43.0.10\n        - --cluster-domain=cluster.local\n        - --network-plugin=cni\n        - --cni-conf-dir=/etc/cni/managed.d\n        {{- if and (ne .Values.REGISTRY \"\") (ne .Values.POD_INFRA_CONTAINER_IMAGE \"\") }}\n        - --pod-infra-container-image=${REGISTRY}/${POD_INFRA_CONTAINER_IMAGE}\n        {{- else if (ne .Values.POD_INFRA_CONTAINER_IMAGE \"\") }}\n        - --pod-infra-container-image=${POD_INFRA_CONTAINER_IMAGE}\n        {{- end }}\n        - --register-schedulable=false\n        {{- range $i, $elem := splitPreserveQuotes .Values.ADDITIONAL_KUBELET_FLAGS }}\n        - {{ $elem }}\n        {{- end }}\n    image: {{$k8sImage}}\n    volumes:\n        - /run:/run\n        - /var/run:/var/run\n        - /sys:/sys:ro\n        - /var/lib/docker:/var/lib/docker\n        - /var/lib/kubelet:/var/lib/kubelet:shared\n        - /var/log/containers:/var/log/containers\n        - /var/log/pods:/var/log/pods\n        - rancher-cni-driver:/etc/cni:ro\n        - rancher-cni-driver:/opt/cni:ro\n        - /dev:/host/dev\n    net: host\n    pid: host\n    ipc: host\n    privileged: true\n    links:\n        - kubernetes\n{{- end }}\n\nproxy:\n    command:\n        - kube-proxy\n        - --kubeconfig=/etc/kubernetes/ssl/kubeconfig\n        - --v=2\n        - --healthz-bind-address=0.0.0.0\n    image: {{$k8sImage}}\n    labels:\n        io.rancher.container.dns: \"true\"\n        io.rancher.scheduler.global: \"true\"\n        io.rancher.container.create_agent: \"true\"\n        io.rancher.container.agent.role: environmentAdmin\n    privileged: true\n    net: host\n    links:\n        - kubernetes\n\netcd:\n    image: {{$etcdImage}}\n    labels:\n        {{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\n        io.rancher.scheduler.affinity:host_label: etcd=true\n        {{- end }}\n        io.rancher.scheduler.affinity:container_label_ne: io.rancher.stack_service.name=$${stack_name}/$${service_name}\n        io.rancher.sidekicks: data\n    environment:\n        RANCHER_DEBUG: 'true'\n        EMBEDDED_BACKUPS: '${EMBEDDED_BACKUPS}'\n        BACKUP_PERIOD: '${BACKUP_PERIOD}'\n        BACKUP_RETENTION: '${BACKUP_RETENTION}'\n        ETCD_HEARTBEAT_INTERVAL: '${ETCD_HEARTBEAT_INTERVAL}'\n        ETCD_ELECTION_TIMEOUT: '${ETCD_ELECTION_TIMEOUT}'\n    volumes:\n    - etcd:/pdata:z\n    - /var/etcd/backups:/data-backup:z\n\ndata:\n    image: busybox\n    entrypoint: /bin/true\n    net: none\n    volumes:\n    - /data\n    labels:\n        io.rancher.container.start_once: 'true'\n\nkubernetes:\n    labels:\n        {{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\n        io.rancher.scheduler.affinity:host_label: orchestration=true\n        {{- end }}\n        io.rancher.scheduler.affinity:container_label_soft: io.rancher.stack_service.name=$${stack_name}/rancher-kubernetes-auth\n        io.rancher.container.create_agent: \"true\"\n        io.rancher.container.agent.role: environmentAdmin\n        io.rancher.sidekicks: kube-hostname-updater\n        io.rancher.websocket.proxy.port: \"6443\"\n        io.rancher.websocket.proxy.scheme: \"https\"\n    command:\n        - kube-apiserver\n        - --storage-backend=etcd2\n        - --service-cluster-ip-range=10.43.0.0/16\n        - --etcd-servers=http://etcd.kubernetes.rancher.internal:2379\n        - --insecure-bind-address=0.0.0.0\n        - --insecure-port=0\n        - --cloud-provider=${CLOUD_PROVIDER}\n        - --allow_privileged=true\n        - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,ResourceQuota,DefaultTolerationSeconds\n        - --client-ca-file=/etc/kubernetes/ssl/ca.pem\n        - --tls-cert-file=/etc/kubernetes/ssl/cert.pem\n        - --tls-private-key-file=/etc/kubernetes/ssl/key.pem\n        - --runtime-config=batch/v2alpha1\n        - --authentication-token-webhook-config-file=/etc/kubernetes/authconfig\n        - --runtime-config=authentication.k8s.io/v1beta1=true\n        {{- if eq .Values.AUDIT_LOGS \"true\" }}\n        - --audit-log-path=-\n        {{- end }}\n        {{- if eq .Values.RBAC \"true\" }}\n        - --authorization-mode=RBAC\n        {{- end }}\n    environment:\n        KUBERNETES_URL: https://kubernetes.kubernetes.rancher.internal:6443\n    image: {{$k8sImage}}\n    links:\n        - etcd\n\nkube-hostname-updater:\n    net: container:kubernetes\n    command:\n        - etc-host-updater\n    image: {{$etcHostUpdaterImage}}\n    links:\n        - kubernetes\n\nkubectld:\n    labels:\n        {{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\n        io.rancher.scheduler.affinity:host_label: orchestration=true\n        {{- end }}\n        io.rancher.container.create_agent: \"true\"\n        io.rancher.container.agent_service.kubernetes_stack: \"true\"\n    environment:\n        SERVER: http://kubernetes.kubernetes.rancher.internal\n        LISTEN: \":8091\"\n    image: {{$kubectldImage}}\n    links:\n        - kubernetes\n\nkubectl-shell:\n    labels:\n        {{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\n        io.rancher.scheduler.affinity:host_label: orchestration=true\n        {{- end }}\n        io.rancher.container.create_agent: \"true\"\n        io.rancher.container.agent.role: environmentAdmin\n        io.rancher.k8s.kubectld: \"true\"\n        io.rancher.k8s.token: \"true\"\n    command:\n        - kubectl-shell-entry.sh\n    image: {{$kubectldImage}}\n    privileged: true\n    health_check:\n        port: 10240\n        interval: 2000\n        response_timeout: 2000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n        initializing_timeout: 60000\n        reinitializing_timeout: 60000\n\n\nscheduler:\n    command:\n        - kube-scheduler\n        - --kubeconfig=/etc/kubernetes/ssl/kubeconfig\n        - --address=0.0.0.0\n    image: {{$k8sImage}}\n    labels:\n        {{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\n        io.rancher.scheduler.affinity:host_label: orchestration=true\n        {{- end }}\n        io.rancher.container.create_agent: \"true\"\n        io.rancher.container.agent.role: environmentAdmin\n    links:\n        - kubernetes\n\ncontroller-manager:\n    command:\n        - kube-controller-manager\n        - --kubeconfig=/etc/kubernetes/ssl/kubeconfig\n        - --cloud-provider=${CLOUD_PROVIDER}\n        - --address=0.0.0.0\n        - --root-ca-file=/etc/kubernetes/ssl/ca.pem\n        - --service-account-private-key-file=/etc/kubernetes/ssl/key.pem\n    image: {{$k8sImage}}\n    labels:\n        {{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\n        io.rancher.scheduler.affinity:host_label: orchestration=true\n        {{- end }}\n        io.rancher.container.create_agent: \"true\"\n        io.rancher.container.agent.role: environmentAdmin\n    links:\n        - kubernetes\n\nrancher-kubernetes-agent:\n    labels:\n        {{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\n        io.rancher.scheduler.affinity:host_label: orchestration=true\n        {{- end }}\n        io.rancher.container.create_agent: \"true\"\n        io.rancher.container.agent.role: agent,environmentAdmin\n        io.rancher.container.agent_service.labels_provider: \"true\"\n        io.rancher.k8s.agent: \"true\"\n    environment:\n        KUBERNETES_URL: https://kubernetes.kubernetes.rancher.internal:6443\n    image: {{$k8sAgentImage}}\n    privileged: true\n    volumes:\n        - /var/run/docker.sock:/var/run/docker.sock\n    links:\n        - kubernetes\n\n{{- if eq .Values.ENABLE_RANCHER_INGRESS_CONTROLLER \"true\" }}\nrancher-ingress-controller:\n    image: {{$ingressControllerImage}}\n    labels:\n        {{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\n        io.rancher.scheduler.affinity:host_label: orchestration=true\n        {{- end }}\n        io.rancher.container.create_agent: \"true\"\n        io.rancher.container.agent.role: environmentAdmin\n    environment:\n        KUBERNETES_URL: https://kubernetes.kubernetes.rancher.internal:6443\n        RANCHER_LB_SEPARATOR: $RANCHER_LB_SEPARATOR\n    command:\n        - lb-controller\n        - --controller=kubernetes\n        - --provider=rancher\n    links:\n        - kubernetes\n    health_check:\n        request_line: GET /healthz HTTP/1.0\n        port: 10241\n        interval: 2000\n        response_timeout: 2000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n        initializing_timeout: 60000\n        reinitializing_timeout: 60000\n{{- end }}\n\nrancher-kubernetes-auth:\n    image: {{$k8sAuthImage}}\n    labels:\n        {{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\n        io.rancher.scheduler.affinity:host_label: orchestration=true\n        {{- end }}\n        io.rancher.scheduler.affinity:container_label: io.rancher.stack_service.name=$${stack_name}/kubernetes\n        io.rancher.container.create_agent: \"true\"\n        io.rancher.container.agent.role: environmentAdmin\n    health_check:\n        request_line: GET /healthcheck HTTP/1.0\n        port: 10240\n        interval: 2000\n        response_timeout: 2000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n        initializing_timeout: 60000\n        reinitializing_timeout: 60000\n\n{{- if eq .Values.ENABLE_ADDONS \"true\" }}\naddon-starter:\n    image: {{$k8sImage}}\n    labels:\n        {{- if eq .Values.CONSTRAINT_TYPE \"required\" }}\n        io.rancher.scheduler.affinity:host_label: orchestration=true\n        {{- end }}\n        io.rancher.container.create_agent: 'true'\n        io.rancher.container.agent.role: environmentAdmin\n    environment:\n        KUBERNETES_URL: https://kubernetes.kubernetes.rancher.internal:6443\n        REGISTRY: ${REGISTRY}\n        INFLUXDB_HOST_PATH: ${INFLUXDB_HOST_PATH}\n        DNS_REPLICAS: ${DNS_REPLICAS}\n    command:\n        - addons-update.sh\n    links:\n        - kubernetes\n    health_check:\n        port: 10240\n        interval: 2000\n        response_timeout: 2000\n        unhealthy_threshold: 3\n        healthy_threshold: 2\n        initializing_timeout: 60000\n        reinitializing_timeout: 60000\n{{- end }}\n"
}